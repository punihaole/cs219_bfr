/**
 * strategy.h
 *
 * Where we implement the routing loop. We spin and peridoically send updates,
 * parse received messages, etc...
 *
 * Cluster head election procedure:
 * 1. listen for a random period from 0 to CANDIDATE_INTERVAL
 * 2. If no candidate messages are received during that time send own candidate
 *    message. This means we are now a candidate to become the cluster head.
 * 3. If we received candidate messages we select one to be the cluster head.
 *    All nodes must select the same one. (i.e. the one with the lowest Id).
 * 4. After 2 full CANDIDATE_INTERVALs have expired we wait
 *
 **/

#ifndef STRATEGY_H_INCLUDED
#define STRATEGY_H_INCLUDED

#define JOIN_TIMEOUT_MS 100 /* ms */
#define JOIN_MAX_ATTEMPTS 4

int stategy_init();

void strategy_close();

void * strategy_service(void * ignore);

/* the daemon filters out net messages that are not routing messages. The ones
 * the strategy layer needs to parse are added to our own queue here.
 */
int strategy_passMsg(struct ccnumr_msg * msg);

#endif // STRATEGY_H_INCLUDED
